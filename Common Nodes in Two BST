/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    long sum = 0;
    HashMap<Integer,Integer> map = new HashMap<>();
    public int solve(TreeNode A, TreeNode B) {

        if(A == null || B == null)return 0;
        nodesInA(A);
        commonNodes(B);
        return (int)(sum%1000000007);
    }
    public void nodesInA(TreeNode A){
        if(A == null)return;
        if(map.containsKey(A.val)){
            map.put(A.val, map.get(A.val)+1);
        }else{
            map.put(A.val, 1);
        }
        nodesInA(A.left);
        nodesInA(A.right);
    }
    public void commonNodes(TreeNode B){
        if(B == null)return;
        if(map.containsKey(B.val)){
            sum+=B.val;
            if(map.get(B.val) > 1){
                map.put(B.val, map.get(B.val)-1);
            }else{
                map.remove(B.val);
            }
        }
        commonNodes(B.left);
        commonNodes(B.right);

    }
}
